/*
===========================================================================
Radix
				*******************************************
				*		DO NOT DELETE ANY FUNCTIONS		  *
				*******************************************
2017
===========================================================================
*/

///////////////////////////////////////////////////////////////////////////////
//	Standard titles.
///////////////////////////////////////////////////////////////////////////////
/*

	i_unique_model_number - специально сгенерированное уникальное число для каждой модели.
	i_settings_create_template - создание файла настроек. (0 - не удачное создание файла. 1 - удачное создание файла)

*/

///////////////////////////////////////////////////////////////////////////////
//	Formalization of comments.
///////////////////////////////////////////////////////////////////////////////
/*

// Short comment

///////////////////////////////////////////////////////////////////////////////
//	Separating the code block
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Description:
//		{DESCRIPTION}
//
// Code: {NAME}
///////////////////////////////////////////////////////////////////////////////

===========================================================================
{FULL_DESCRIPTION}
===========================================================================

(fast separating the code block)
//-----------------------------------------------------------------------------
*/

///////////////////////////////////////////////////////////////////////////////
//	Key
///////////////////////////////////////////////////////////////////////////////
/*

Delete in stable version
//	DELETE

Test function
Delete in stable version
//	TEST

Check for errors
//	DEBUG

Speed up the execution of the block/function
Make soup
//	SOUP

*/

///////////////////////////////////////////////////////////////////////////////
//	Threads
///////////////////////////////////////////////////////////////////////////////
void v_thread() {

}

///////////////////////////////////////////////////////////////////////////////
//	files
///////////////////////////////////////////////////////////////////////////////
void v_search() {

}

/*
	Поиск локальной версии прошивки
		1 - найдено
		0 - не найдено
		-1 - ошибка
	На вход подаётся значение int - специально сгенерированное уникальное число для каждой модели. (i_unique_model_number)
	Структура файлов
		\\PATCH\\assets\\firmware
	Название файлов:
		{int}.rar
		\	\_____
		 \________int - специально сгенерированное уникальное число для каждой модели. (i_unique_model_number)
*/
int i_search(int i_unique_model_number) {

	return -1;
}

/*
	Загрузка прошивки через сеть интернет
		1 - успешно
		0 - не успешно
		-1 - ошибка
	На вход подаётся значение int - специально сгенерированное уникальное число для каждой модели. (i_unique_model_number)
*/
int i_internet(int i_unique_model_number) {

	return -1;
}

///////////////////////////////////////////////////////////////////////////////
//	Graphic.
///////////////////////////////////////////////////////////////////////////////

void v_window() {

}

///////////////////////////////////////////////////////////////////////////////
//	Logging.
///////////////////////////////////////////////////////////////////////////////
/*
		Логгер
		Определение логгера:
			void LOG(string s);
			void WARN(string s);
			void MAGE(string s); (От слова MESSAGE. M...AGE, MAGE)
		Логирование:
			LOG("{MESSAGE}");
			WARN("{MESSAGE}");
			MAGE("{MESSAGE}");
		Уровни лога:
			0 - MAGE уровень. Вывод текста без времени
				Пример:
					[                   ] MAGE
			1 - LOG уровень. Стандартные сообщения загрузки, подключения, отключения модулей. Статус задания
				Пример:
					[2017/10/24 21:57:45] [LOG]	LOG
			2 - WARN уровень. Сообщения ошибки
				Пример:
					[2017/10/24 21:57:45] [WARN]	WARN
*/
